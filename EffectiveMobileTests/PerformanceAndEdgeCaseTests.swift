//
//  PerformanceAndEdgeCaseTests.swift
//  EffectiveMobileTests
//
//  Created by Roman Romanov on 30.07.2025.
//

@testable import EffectiveMobile
import Foundation
import Testing

// MARK: - Performance Tests

struct PerformanceTests {

	@Test func testCreateManyTodosPerformance() {
		let mockStore = MockTodoStoreForTesting()
		let service = TodoService(todoStore: mockStore)
		let startTime = CFAbsoluteTimeGetCurrent()
		// –°–æ–∑–¥–∞–µ–º 1000 –∑–∞–¥–∞—á
		for index in 0..<1000 {
			service.createTodo(
				title: "Performance Test Todo \(index)",
				date: Date(),
				description: "Performance test description \(index)"
			)
		}

		let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime

		#expect(mockStore.todos.count == 1000)
		#expect(timeElapsed < 1.0) // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
	}

	@Test func testFetchManyTodosPerformance() {
		let mockStore = MockTodoStoreForTesting()
		let service = TodoService(todoStore: mockStore)
		// –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞—á
		for index in 0..<500 {
			service.createTodo(
				title: "Fetch Test Todo \(index)",
				date: Date(),
				description: "Fetch test description \(index)"
			)
		}

		let startTime = CFAbsoluteTimeGetCurrent()
		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
		let todos = service.fetchTodos()
		let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
		#expect(todos.count == 500)
		#expect(timeElapsed < 0.5) // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã
	}

	@Test func testToggleManyTodosPerformance() {
		let mockStore = MockTodoStoreForTesting()
		let service = TodoService(todoStore: mockStore)

		// –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
		for index in 0..<100 {
			service.createTodo(
				title: "Toggle Test Todo \(index)",
				date: Date(),
				description: "Toggle test description \(index)"
			)
		}

		let todoIds = service.fetchTodos().compactMap { $0.id }
		let startTime = CFAbsoluteTimeGetCurrent()
		// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á
		for id in todoIds {
			service.toggleTodo(with: id)
		}
		let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
		#expect(timeElapsed < 0.5) // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å
		let toggledTodos = service.fetchTodos()
		let allCompleted = toggledTodos.allSatisfy { $0.completed }
		#expect(allCompleted)
	}
}

// MARK: - Edge Case Tests

struct EdgeCaseTests {

	@Test func testCreateTodoWithVeryLongTitle() {
		let mockStore = MockTodoStoreForTesting()
		let service = TodoService(todoStore: mockStore)
		// –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (1000 —Å–∏–º–≤–æ–ª–æ–≤)
		let longTitle = String(repeating: "A", count: 1000)
		service.createTodo(title: longTitle, date: Date(), description: "Description")

		#expect(mockStore.todos.count == 1)
		#expect(mockStore.todos.first?.title == longTitle)
	}

	@Test func testCreateTodoWithVeryLongDescription() {
		let mockStore = MockTodoStoreForTesting()
		let service = TodoService(todoStore: mockStore)
		// –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (5000 —Å–∏–º–≤–æ–ª–æ–≤)
		let longDescription = String(repeating: "B", count: 5000)
		service.createTodo(title: "Title", date: Date(), description: longDescription)

		#expect(mockStore.todos.count == 1)
		#expect(mockStore.todos.first?.taskDescription == longDescription)
	}

	@Test func testCreateTodoWithSpecialCharacters() {
		let mockStore = MockTodoStoreForTesting()
		let service = TodoService(todoStore: mockStore)
		let specialTitle = "üöÄ –ó–∞–¥–∞—á–∞ —Å —ç–º–æ–¥–∑–∏ & —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏: <>&\"'"
		let specialDescription = "–û–ø–∏—Å–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏\n—Å—Ç—Ä–æ–∫ –∏ —Ç–∞–±—É–ª—è—Ü–∏–µ–π\t"

		service.createTodo(title: specialTitle, date: Date(), description: specialDescription)

		#expect(mockStore.todos.count == 1)
		#expect(mockStore.todos.first?.title == specialTitle)
		#expect(mockStore.todos.first?.taskDescription == specialDescription)
	}

	@Test func testCreateTodoWithFutureDate() {
		let mockStore = MockTodoStoreForTesting()
		let service = TodoService(todoStore: mockStore)
		// –î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º (—á–µ—Ä–µ–∑ –≥–æ–¥)
		let futureDate = Date().addingTimeInterval(365 * 24 * 60 * 60)
		service.createTodo(title: "Future Todo", date: futureDate, description: "Future Description")

		#expect(mockStore.todos.count == 1)
		#expect(mockStore.todos.first?.date == futureDate)
	}

	@Test func testCreateTodoWithPastDate() {
		let mockStore = MockTodoStoreForTesting()
		let service = TodoService(todoStore: mockStore)
		// –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º (–≥–æ–¥ –Ω–∞–∑–∞–¥)
		let pastDate = Date().addingTimeInterval(-365 * 24 * 60 * 60)

		service.createTodo(title: "Past Todo", date: pastDate, description: "Past Description")

		#expect(mockStore.todos.count == 1)
		#expect(mockStore.todos.first?.date == pastDate)
	}

	@Test func testSearchWithEmptyQuery() {
		let mockPresenter = TodoListPresenter()
		// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
		let todos = [
			TodoModel(id: UUID(), title: "Test Todo", description: "Test Description", completed: false, date: "2025-07-30")
		]
		mockPresenter.viewModel = TodoListModel(todos: todos, total: 1)

		let result = mockPresenter.searchTodo(with: "")
		#expect(result?.todos.count == 1) // –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
	}

	@Test func testSearchWithNonExistentQuery() {
		let mockPresenter = TodoListPresenter()
		let todos = [
			TodoModel(id: UUID(), title: "Test Todo", description: "Test Description", completed: false, date: "2025-07-30")
		]
		mockPresenter.viewModel = TodoListModel(todos: todos, total: 1)
		let result = mockPresenter.searchTodo(with: "NonExistent")
		#expect(result?.todos.count == 0) // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
	}

	@Test func testSearchCaseInsensitive() {
		let mockPresenter = TodoListPresenter()
		let todos = [
			TodoModel(id: UUID(), title: "Test Todo", description: "Test Description", completed: false, date: "2025-07-30")
		]
		mockPresenter.viewModel = TodoListModel(todos: todos, total: 1)

		let result1 = mockPresenter.searchTodo(with: "test")
		let result2 = mockPresenter.searchTodo(with: "TEST")
		let result3 = mockPresenter.searchTodo(with: "Test")

		#expect(result1?.todos.count == 1)
		#expect(result2?.todos.count == 1)
		#expect(result3?.todos.count == 1)
	}

	@Test func testFetchErrorTypes() {
		let networkError = FetchError.networkError
		let decodingError = FetchError.decodingError
		let urlError = FetchError.urlError
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã
		#expect(networkError != decodingError)
		#expect(decodingError != urlError)
		#expect(networkError != urlError)
	}

	@Test func testTodoListModelWithEmptyTodos() {
		let emptyModel = TodoListModel(todos: [], total: 0)
		#expect(emptyModel.todos.isEmpty)
		#expect(emptyModel.total == 0)
	}
}

// MARK: - Memory Management Tests

struct MemoryManagementTests {
	@Test func testWeakReferencesInInteractor() {
		let mockService = MockTodoService()
		let interactor = TodoListInteractor(todoService: mockService)

		var presenter: TodoListPresenter? = TodoListPresenter()
		interactor.presenter = presenter

		#expect(interactor.presenter != nil)
		// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º presenter
		presenter = nil
		// Weak reference –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å nil
		#expect(interactor.presenter == nil)
	}

	@Test func testWeakReferencesInEditInteractor() {
		let mockService = MockTodoService()
		let interactor = TodoEditInteractor(todoService: mockService)

		var presenter: TodoEditPresenter? = TodoEditPresenter()
		interactor.presenter = presenter

		#expect(interactor.presenter != nil)
		// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º presenter
		presenter = nil
		// Weak reference –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å nil
		#expect(interactor.presenter == nil)
	}

	@Test func testWeakReferencesInPresenter() {
		let presenter = TodoListPresenter()

		var mockView: MockTodoListViewController? = MockTodoListViewController()
		presenter.view = mockView

		#expect(presenter.view != nil)
		// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º view
		mockView = nil
		// Weak reference –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å nil
		#expect(presenter.view == nil)
	}
}

// MARK: - Mock Classes for Memory Tests

class MockTodoListViewController: TodoListViewControllerProtocol {

	var presenter: TodoListPresenterProtocol?

	func showTodos(with viewModel: TodoListModel) {}
	func showError(message: String) {}
	func showLoading() {}
	func hideLoading() {}
	func reloadTableView() {}
	func reloadCell(with indexPath: IndexPath) {}
	func update(with todos: EffectiveMobile.TodoListModel?) {}
	func update(with error: String) {}
}
